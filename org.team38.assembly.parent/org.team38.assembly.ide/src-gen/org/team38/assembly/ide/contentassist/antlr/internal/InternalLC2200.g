/*
 * generated by Xtext 2.9.1
 */
grammar InternalLC2200;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.team38.assembly.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.team38.assembly.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.team38.assembly.services.LC2200GrammarAccess;

}
@parser::members {
	private LC2200GrammarAccess grammarAccess;

	public void setGrammarAccess(LC2200GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getLinesAssignment()); }
		(rule__Program__LinesAssignment)*
		{ after(grammarAccess.getProgramAccess().getLinesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup()); }
		(rule__Instruction__Group__0)
		{ after(grammarAccess.getInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirective
entryRuleDirective
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectiveAccess().getGroup()); }
		(rule__Directive__Group__0)
		{ after(grammarAccess.getDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRInstruction
entryRuleRInstruction
:
{ before(grammarAccess.getRInstructionRule()); }
	 ruleRInstruction
{ after(grammarAccess.getRInstructionRule()); } 
	 EOF 
;

// Rule RInstruction
ruleRInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRInstructionAccess().getGroup()); }
		(rule__RInstruction__Group__0)
		{ after(grammarAccess.getRInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIInstruction
entryRuleIInstruction
:
{ before(grammarAccess.getIInstructionRule()); }
	 ruleIInstruction
{ after(grammarAccess.getIInstructionRule()); } 
	 EOF 
;

// Rule IInstruction
ruleIInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIInstructionAccess().getAlternatives()); }
		(rule__IInstruction__Alternatives)
		{ after(grammarAccess.getIInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJInstruction
entryRuleJInstruction
:
{ before(grammarAccess.getJInstructionRule()); }
	 ruleJInstruction
{ after(grammarAccess.getJInstructionRule()); } 
	 EOF 
;

// Rule JInstruction
ruleJInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJInstructionAccess().getGroup()); }
		(rule__JInstruction__Group__0)
		{ after(grammarAccess.getJInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOInstruction
entryRuleOInstruction
:
{ before(grammarAccess.getOInstructionRule()); }
	 ruleOInstruction
{ after(grammarAccess.getOInstructionRule()); } 
	 EOF 
;

// Rule OInstruction
ruleOInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOInstructionAccess().getO_opcodeAssignment()); }
		(rule__OInstruction__O_opcodeAssignment)
		{ after(grammarAccess.getOInstructionAccess().getO_opcodeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNOOPDirective
entryRuleNOOPDirective
:
{ before(grammarAccess.getNOOPDirectiveRule()); }
	 ruleNOOPDirective
{ after(grammarAccess.getNOOPDirectiveRule()); } 
	 EOF 
;

// Rule NOOPDirective
ruleNOOPDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNOOPDirectiveAccess().getN_dirAssignment()); }
		(rule__NOOPDirective__N_dirAssignment)
		{ after(grammarAccess.getNOOPDirectiveAccess().getN_dirAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWordDirective
entryRuleWordDirective
:
{ before(grammarAccess.getWordDirectiveRule()); }
	 ruleWordDirective
{ after(grammarAccess.getWordDirectiveRule()); } 
	 EOF 
;

// Rule WordDirective
ruleWordDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordDirectiveAccess().getGroup()); }
		(rule__WordDirective__Group__0)
		{ after(grammarAccess.getWordDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__LinesAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getLinesInstructionParserRuleCall_0_0()); }
		ruleInstruction
		{ after(grammarAccess.getProgramAccess().getLinesInstructionParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getLinesDirectiveParserRuleCall_0_1()); }
		ruleDirective
		{ after(grammarAccess.getProgramAccess().getLinesDirectiveParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__InstructionAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionRInstructionParserRuleCall_1_0_0()); }
		ruleRInstruction
		{ after(grammarAccess.getInstructionAccess().getInstructionRInstructionParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionIInstructionParserRuleCall_1_0_1()); }
		ruleIInstruction
		{ after(grammarAccess.getInstructionAccess().getInstructionIInstructionParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionJInstructionParserRuleCall_1_0_2()); }
		ruleJInstruction
		{ after(grammarAccess.getInstructionAccess().getInstructionJInstructionParserRuleCall_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionOInstructionParserRuleCall_1_0_3()); }
		ruleOInstruction
		{ after(grammarAccess.getInstructionAccess().getInstructionOInstructionParserRuleCall_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getCOMMENTTerminalRuleCall_2_0()); }
		RULE_COMMENT
		{ after(grammarAccess.getInstructionAccess().getCOMMENTTerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getNEWLINETerminalRuleCall_2_1()); }
		RULE_NEWLINE
		{ after(grammarAccess.getInstructionAccess().getNEWLINETerminalRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__DirectiveAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getDirectiveNOOPDirectiveParserRuleCall_1_0_0()); }
		ruleNOOPDirective
		{ after(grammarAccess.getDirectiveAccess().getDirectiveNOOPDirectiveParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getDirectiveWordDirectiveParserRuleCall_1_0_1()); }
		ruleWordDirective
		{ after(grammarAccess.getDirectiveAccess().getDirectiveWordDirectiveParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getCOMMENTTerminalRuleCall_2_0()); }
		RULE_COMMENT
		{ after(grammarAccess.getDirectiveAccess().getCOMMENTTerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectiveAccess().getNEWLINETerminalRuleCall_2_1()); }
		RULE_NEWLINE
		{ after(grammarAccess.getDirectiveAccess().getNEWLINETerminalRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getGroup_0()); }
		(rule__IInstruction__Group_0__0)
		{ after(grammarAccess.getIInstructionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getIInstructionAccess().getGroup_1()); }
		(rule__IInstruction__Group_1__0)
		{ after(grammarAccess.getIInstructionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getIInstructionAccess().getGroup_2()); }
		(rule__IInstruction__Group_2__0)
		{ after(grammarAccess.getIInstructionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getLabelAssignment_0()); }
	(rule__Instruction__LabelAssignment_0)?
	{ after(grammarAccess.getInstructionAccess().getLabelAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__1__Impl
	rule__Instruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInstructionAssignment_1()); }
	(rule__Instruction__InstructionAssignment_1)
	{ after(grammarAccess.getInstructionAccess().getInstructionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAlternatives_2()); }
	(rule__Instruction__Alternatives_2)?
	{ after(grammarAccess.getInstructionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Directive__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__0__Impl
	rule__Directive__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getLabelAssignment_0()); }
	(rule__Directive__LabelAssignment_0)?
	{ after(grammarAccess.getDirectiveAccess().getLabelAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__1__Impl
	rule__Directive__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getDirectiveAssignment_1()); }
	(rule__Directive__DirectiveAssignment_1)
	{ after(grammarAccess.getDirectiveAccess().getDirectiveAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getAlternatives_2()); }
	(rule__Directive__Alternatives_2)?
	{ after(grammarAccess.getDirectiveAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RInstruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__0__Impl
	rule__RInstruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getR_opcodeAssignment_0()); }
	(rule__RInstruction__R_opcodeAssignment_0)
	{ after(grammarAccess.getRInstructionAccess().getR_opcodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__1__Impl
	rule__RInstruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getReg1Assignment_1()); }
	(rule__RInstruction__Reg1Assignment_1)
	{ after(grammarAccess.getRInstructionAccess().getReg1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__2__Impl
	rule__RInstruction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getCOMMATerminalRuleCall_2()); }
	RULE_COMMA
	{ after(grammarAccess.getRInstructionAccess().getCOMMATerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__3__Impl
	rule__RInstruction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getReg2Assignment_3()); }
	(rule__RInstruction__Reg2Assignment_3)
	{ after(grammarAccess.getRInstructionAccess().getReg2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__4__Impl
	rule__RInstruction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getCOMMATerminalRuleCall_4()); }
	RULE_COMMA
	{ after(grammarAccess.getRInstructionAccess().getCOMMATerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RInstruction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRInstructionAccess().getReg3Assignment_5()); }
	(rule__RInstruction__Reg3Assignment_5)
	{ after(grammarAccess.getRInstructionAccess().getReg3Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IInstruction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__0__Impl
	rule__IInstruction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_0_0()); }
	(rule__IInstruction__I_opcodeAssignment_0_0)
	{ after(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__1__Impl
	rule__IInstruction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg1Assignment_0_1()); }
	(rule__IInstruction__Reg1Assignment_0_1)
	{ after(grammarAccess.getIInstructionAccess().getReg1Assignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__2__Impl
	rule__IInstruction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_0_2()); }
	RULE_COMMA
	{ after(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__3__Impl
	rule__IInstruction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg2Assignment_0_3()); }
	(rule__IInstruction__Reg2Assignment_0_3)
	{ after(grammarAccess.getIInstructionAccess().getReg2Assignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__4__Impl
	rule__IInstruction__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_0_4()); }
	RULE_COMMA
	{ after(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getImmAssignment_0_5()); }
	(rule__IInstruction__ImmAssignment_0_5)
	{ after(grammarAccess.getIInstructionAccess().getImmAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IInstruction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__0__Impl
	rule__IInstruction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_1_0()); }
	(rule__IInstruction__I_opcodeAssignment_1_0)
	{ after(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__1__Impl
	rule__IInstruction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg1Assignment_1_1()); }
	(rule__IInstruction__Reg1Assignment_1_1)
	{ after(grammarAccess.getIInstructionAccess().getReg1Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__2__Impl
	rule__IInstruction__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_1_2()); }
	RULE_COMMA
	{ after(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__3__Impl
	rule__IInstruction__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getImmAssignment_1_3()); }
	(rule__IInstruction__ImmAssignment_1_3)
	{ after(grammarAccess.getIInstructionAccess().getImmAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__4__Impl
	rule__IInstruction__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getLPARENTerminalRuleCall_1_4()); }
	RULE_LPAREN
	{ after(grammarAccess.getIInstructionAccess().getLPARENTerminalRuleCall_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__5__Impl
	rule__IInstruction__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg2Assignment_1_5()); }
	(rule__IInstruction__Reg2Assignment_1_5)
	{ after(grammarAccess.getIInstructionAccess().getReg2Assignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getRPARENTerminalRuleCall_1_6()); }
	RULE_RPAREN
	{ after(grammarAccess.getIInstructionAccess().getRPARENTerminalRuleCall_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IInstruction__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__0__Impl
	rule__IInstruction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_2_0()); }
	(rule__IInstruction__I_opcodeAssignment_2_0)
	{ after(grammarAccess.getIInstructionAccess().getI_opcodeAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__1__Impl
	rule__IInstruction__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg1Assignment_2_1()); }
	(rule__IInstruction__Reg1Assignment_2_1)
	{ after(grammarAccess.getIInstructionAccess().getReg1Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__2__Impl
	rule__IInstruction__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_2_2()); }
	RULE_COMMA
	{ after(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__3__Impl
	rule__IInstruction__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getReg2Assignment_2_3()); }
	(rule__IInstruction__Reg2Assignment_2_3)
	{ after(grammarAccess.getIInstructionAccess().getReg2Assignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__4__Impl
	rule__IInstruction__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_2_4()); }
	RULE_COMMA
	{ after(grammarAccess.getIInstructionAccess().getCOMMATerminalRuleCall_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IInstruction__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Group_2__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIInstructionAccess().getImmAssignment_2_5()); }
	(rule__IInstruction__ImmAssignment_2_5)
	{ after(grammarAccess.getIInstructionAccess().getImmAssignment_2_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__JInstruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JInstruction__Group__0__Impl
	rule__JInstruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJInstructionAccess().getJ_opcodeAssignment_0()); }
	(rule__JInstruction__J_opcodeAssignment_0)
	{ after(grammarAccess.getJInstructionAccess().getJ_opcodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JInstruction__Group__1__Impl
	rule__JInstruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJInstructionAccess().getReg1Assignment_1()); }
	(rule__JInstruction__Reg1Assignment_1)
	{ after(grammarAccess.getJInstructionAccess().getReg1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JInstruction__Group__2__Impl
	rule__JInstruction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJInstructionAccess().getCOMMATerminalRuleCall_2()); }
	RULE_COMMA
	{ after(grammarAccess.getJInstructionAccess().getCOMMATerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__JInstruction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJInstructionAccess().getReg2Assignment_3()); }
	(rule__JInstruction__Reg2Assignment_3)
	{ after(grammarAccess.getJInstructionAccess().getReg2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WordDirective__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordDirective__Group__0__Impl
	rule__WordDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WordDirective__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordDirectiveAccess().getW_dirAssignment_0()); }
	(rule__WordDirective__W_dirAssignment_0)
	{ after(grammarAccess.getWordDirectiveAccess().getW_dirAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordDirective__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WordDirective__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordDirectiveAccess().getImmAssignment_1()); }
	(rule__WordDirective__ImmAssignment_1)
	{ after(grammarAccess.getWordDirectiveAccess().getImmAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__LinesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getLinesAlternatives_0()); }
		(rule__Program__LinesAlternatives_0)
		{ after(grammarAccess.getProgramAccess().getLinesAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__LabelAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getLabelLABELTerminalRuleCall_0_0()); }
		RULE_LABEL
		{ after(grammarAccess.getInstructionAccess().getLabelLABELTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__InstructionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getInstructionAlternatives_1_0()); }
		(rule__Instruction__InstructionAlternatives_1_0)
		{ after(grammarAccess.getInstructionAccess().getInstructionAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__LabelAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getLabelLABELTerminalRuleCall_0_0()); }
		RULE_LABEL
		{ after(grammarAccess.getDirectiveAccess().getLabelLABELTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__DirectiveAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getDirectiveAlternatives_1_0()); }
		(rule__Directive__DirectiveAlternatives_1_0)
		{ after(grammarAccess.getDirectiveAccess().getDirectiveAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__R_opcodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRInstructionAccess().getR_opcodeROPTerminalRuleCall_0_0()); }
		RULE_ROP
		{ after(grammarAccess.getRInstructionAccess().getR_opcodeROPTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Reg1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRInstructionAccess().getReg1REGTerminalRuleCall_1_0()); }
		RULE_REG
		{ after(grammarAccess.getRInstructionAccess().getReg1REGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Reg2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRInstructionAccess().getReg2REGTerminalRuleCall_3_0()); }
		RULE_REG
		{ after(grammarAccess.getRInstructionAccess().getReg2REGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RInstruction__Reg3Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRInstructionAccess().getReg3REGTerminalRuleCall_5_0()); }
		RULE_REG
		{ after(grammarAccess.getRInstructionAccess().getReg3REGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__I_opcodeAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getI_opcodeIOP_IMMTerminalRuleCall_0_0_0()); }
		RULE_IOP_IMM
		{ after(grammarAccess.getIInstructionAccess().getI_opcodeIOP_IMMTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg1Assignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_0_1_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg2Assignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_0_3_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__ImmAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getImmIMMEDIATETerminalRuleCall_0_5_0()); }
		RULE_IMMEDIATE
		{ after(grammarAccess.getIInstructionAccess().getImmIMMEDIATETerminalRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__I_opcodeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getI_opcodeIOP_OFFSETTerminalRuleCall_1_0_0()); }
		RULE_IOP_OFFSET
		{ after(grammarAccess.getIInstructionAccess().getI_opcodeIOP_OFFSETTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg1Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_1_1_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__ImmAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getImmIMMEDIATETerminalRuleCall_1_3_0()); }
		RULE_IMMEDIATE
		{ after(grammarAccess.getIInstructionAccess().getImmIMMEDIATETerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg2Assignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_1_5_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__I_opcodeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getI_opcodeIOP_LABELTerminalRuleCall_2_0_0()); }
		RULE_IOP_LABEL
		{ after(grammarAccess.getIInstructionAccess().getI_opcodeIOP_LABELTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg1Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_2_1_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg1REGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__Reg2Assignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_2_3_0()); }
		RULE_REG
		{ after(grammarAccess.getIInstructionAccess().getReg2REGTerminalRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IInstruction__ImmAssignment_2_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIInstructionAccess().getImmLABEL_IMMTerminalRuleCall_2_5_0()); }
		RULE_LABEL_IMM
		{ after(grammarAccess.getIInstructionAccess().getImmLABEL_IMMTerminalRuleCall_2_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__J_opcodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJInstructionAccess().getJ_opcodeJOPTerminalRuleCall_0_0()); }
		RULE_JOP
		{ after(grammarAccess.getJInstructionAccess().getJ_opcodeJOPTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Reg1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJInstructionAccess().getReg1REGTerminalRuleCall_1_0()); }
		RULE_REG
		{ after(grammarAccess.getJInstructionAccess().getReg1REGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JInstruction__Reg2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJInstructionAccess().getReg2REGTerminalRuleCall_3_0()); }
		RULE_REG
		{ after(grammarAccess.getJInstructionAccess().getReg2REGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OInstruction__O_opcodeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOInstructionAccess().getO_opcodeOOPTerminalRuleCall_0()); }
		RULE_OOP
		{ after(grammarAccess.getOInstructionAccess().getO_opcodeOOPTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NOOPDirective__N_dirAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNOOPDirectiveAccess().getN_dirNOOPTerminalRuleCall_0()); }
		RULE_NOOP
		{ after(grammarAccess.getNOOPDirectiveAccess().getN_dirNOOPTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordDirective__W_dirAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordDirectiveAccess().getW_dirWORDTerminalRuleCall_0_0()); }
		RULE_WORD
		{ after(grammarAccess.getWordDirectiveAccess().getW_dirWORDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordDirective__ImmAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordDirectiveAccess().getImmIMMEDIATETerminalRuleCall_1_0()); }
		RULE_IMMEDIATE
		{ after(grammarAccess.getWordDirectiveAccess().getImmIMMEDIATETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NOOP : 'noop';

RULE_WORD : '.word';

RULE_OOP : ('halt'|'ei'|'di'|'reti');

RULE_JOP : 'jalr';

RULE_IOP_IMM : 'addi';

RULE_IOP_OFFSET : ('lw'|'sw');

RULE_IOP_LABEL : 'beq';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_COMMA : ',';

RULE_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_NEWLINE : '\n';

RULE_ROP : ('add'|'nand');

RULE_REG : ('$zero'|'$at'|'$v0'|'$a0'|'$a1'|'$a2'|'$a3'|'$a4'|'$s0'|'$s1'|'$s2'|'$s3'|'$k0'|'$sp'|'$fp'|'$ra');

RULE_IMMEDIATE : '0x'? RULE_INT;

RULE_LABEL_IMM : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LABEL : RULE_LABEL_IMM ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
