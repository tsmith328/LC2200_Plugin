/*
 * generated by Xtext 2.9.1
 */
package org.team38.assembly.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.team38.assembly.lC2200.Directive;
import org.team38.assembly.lC2200.IInstruction;
import org.team38.assembly.lC2200.Instruction;
import org.team38.assembly.lC2200.JInstruction;
import org.team38.assembly.lC2200.LC2200Package;
import org.team38.assembly.lC2200.NOOPDirective;
import org.team38.assembly.lC2200.OInstruction;
import org.team38.assembly.lC2200.Program;
import org.team38.assembly.lC2200.RInstruction;
import org.team38.assembly.lC2200.WordDirective;
import org.team38.assembly.services.LC2200GrammarAccess;

@SuppressWarnings("all")
public class LC2200SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LC2200GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LC2200Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LC2200Package.DIRECTIVE:
				sequence_Directive(context, (Directive) semanticObject); 
				return; 
			case LC2200Package.IINSTRUCTION:
				sequence_IInstruction(context, (IInstruction) semanticObject); 
				return; 
			case LC2200Package.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case LC2200Package.JINSTRUCTION:
				sequence_JInstruction(context, (JInstruction) semanticObject); 
				return; 
			case LC2200Package.NOOP_DIRECTIVE:
				sequence_NOOPDirective(context, (NOOPDirective) semanticObject); 
				return; 
			case LC2200Package.OINSTRUCTION:
				sequence_OInstruction(context, (OInstruction) semanticObject); 
				return; 
			case LC2200Package.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case LC2200Package.RINSTRUCTION:
				sequence_RInstruction(context, (RInstruction) semanticObject); 
				return; 
			case LC2200Package.WORD_DIRECTIVE:
				sequence_WordDirective(context, (WordDirective) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Directive returns Directive
	 *
	 * Constraint:
	 *     (label=LABEL? (directive=NOOPDirective | directive=WordDirective))
	 */
	protected void sequence_Directive(ISerializationContext context, Directive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IInstruction returns IInstruction
	 *
	 * Constraint:
	 *     (
	 *         (i_opcode=IOP_IMM reg1=REG reg2=REG imm=IMMEDIATE) | 
	 *         (i_opcode=IOP_OFFSET reg1=REG imm=IMMEDIATE reg2=REG) | 
	 *         (i_opcode=IOP_LABEL reg1=REG reg2=REG imm=LABEL_IMM)
	 *     )
	 */
	protected void sequence_IInstruction(ISerializationContext context, IInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (label=LABEL? (instruction=RInstruction | instruction=IInstruction | instruction=JInstruction | instruction=OInstruction))
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JInstruction returns JInstruction
	 *
	 * Constraint:
	 *     (j_opcode=JOP reg1=REG reg2=REG)
	 */
	protected void sequence_JInstruction(ISerializationContext context, JInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.JINSTRUCTION__JOPCODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.JINSTRUCTION__JOPCODE));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.JINSTRUCTION__REG1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.JINSTRUCTION__REG1));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.JINSTRUCTION__REG2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.JINSTRUCTION__REG2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJInstructionAccess().getJ_opcodeJOPTerminalRuleCall_0_0(), semanticObject.getJ_opcode());
		feeder.accept(grammarAccess.getJInstructionAccess().getReg1REGTerminalRuleCall_1_0(), semanticObject.getReg1());
		feeder.accept(grammarAccess.getJInstructionAccess().getReg2REGTerminalRuleCall_3_0(), semanticObject.getReg2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NOOPDirective returns NOOPDirective
	 *
	 * Constraint:
	 *     n_dir=NOOP
	 */
	protected void sequence_NOOPDirective(ISerializationContext context, NOOPDirective semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.NOOP_DIRECTIVE__NDIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.NOOP_DIRECTIVE__NDIR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNOOPDirectiveAccess().getN_dirNOOPTerminalRuleCall_0(), semanticObject.getN_dir());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OInstruction returns OInstruction
	 *
	 * Constraint:
	 *     o_opcode=OOP
	 */
	protected void sequence_OInstruction(ISerializationContext context, OInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.OINSTRUCTION__OOPCODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.OINSTRUCTION__OOPCODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOInstructionAccess().getO_opcodeOOPTerminalRuleCall_0(), semanticObject.getO_opcode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (lines+=Instruction | lines+=Directive)+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RInstruction returns RInstruction
	 *
	 * Constraint:
	 *     (r_opcode=ROP reg1=REG reg2=REG reg3=REG)
	 */
	protected void sequence_RInstruction(ISerializationContext context, RInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.RINSTRUCTION__ROPCODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.RINSTRUCTION__ROPCODE));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG1));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG2));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.RINSTRUCTION__REG3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRInstructionAccess().getR_opcodeROPTerminalRuleCall_0_0(), semanticObject.getR_opcode());
		feeder.accept(grammarAccess.getRInstructionAccess().getReg1REGTerminalRuleCall_1_0(), semanticObject.getReg1());
		feeder.accept(grammarAccess.getRInstructionAccess().getReg2REGTerminalRuleCall_3_0(), semanticObject.getReg2());
		feeder.accept(grammarAccess.getRInstructionAccess().getReg3REGTerminalRuleCall_5_0(), semanticObject.getReg3());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WordDirective returns WordDirective
	 *
	 * Constraint:
	 *     (w_dir=WORD imm=IMMEDIATE)
	 */
	protected void sequence_WordDirective(ISerializationContext context, WordDirective semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.WORD_DIRECTIVE__WDIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.WORD_DIRECTIVE__WDIR));
			if (transientValues.isValueTransient(semanticObject, LC2200Package.Literals.WORD_DIRECTIVE__IMM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LC2200Package.Literals.WORD_DIRECTIVE__IMM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordDirectiveAccess().getW_dirWORDTerminalRuleCall_0_0(), semanticObject.getW_dir());
		feeder.accept(grammarAccess.getWordDirectiveAccess().getImmIMMEDIATETerminalRuleCall_1_0(), semanticObject.getImm());
		feeder.finish();
	}
	
	
}
